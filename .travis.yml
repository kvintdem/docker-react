language: generic

# any time we want Docker, we need super user permissions
sudo: required

# we need a copy of Docker
services:
  - docker

# need to instruct Docker to create an image from our code
before_install:
  - docker build -t dun/docker-react -f Dockerfile.dev .

# instruct Travis to run the tests
# if the '-- --coverage' flag is not used, 
# npm would just hang in there waiting for input from the user
script:
  - docker run -e CI=true dun/docker-react npm run test


# how to deploy it to aws
deploy:
  provider: elasticbeanstalk
  region: "us-west-2"

  # name we gave for the App in Elastic Beanstalk
  app: "docker"

  # web environment name
  # text written after / in the user interface when checking out Elastic Beanstalk app
  env: "Docker-env"
  # name of S3 bucket created by ElasticBeanstalk automatically
  bucket_name: "elasticbeanstalk-us-west-2-xfsfsdfsfsfsfs"
  # a bucket is only created in S3 if at least one deploy has run
  # the path will be the samee as the name of the app
  bucket_path: "docker"
  # only deploy the app if branch master gets new code
  on:
    branch: master

  # generate a new user in AWS with full access to ElasticBeanstalk: 
  # AdministratorAccess-AWSElasticBeanstalk
  # the user will get generated an access key and secret key
  # in Travis UI, click 'More options' and 'Settings' and find the environment variables section
  # ensure the 'display value in build log' is not enabled
  access_key_id: $AWS_ACCESS_KEY
  secret_access_key: $AWS_SECRET_KEY
  ## or??
  #secret_access_key: 
  #  secure: $AWS_SECRET_KEY